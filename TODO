
v 0.2
=====

* optimize buffer usage for memtier with --pipeline=xx
* optimize memcache entry expiration checks
* parallel polling mechanism

v 0.3
=====

* new concurrent memory manager
** https://github.com/cksystemsgroup/scalloc
** slab allocator (to base object pools on)
** buddy allocator (for chunks and slabs)
* minimize memcache locks or non-blocking memcache table

;;; At this point it becomes ready to challenge stock memcached

Essentials:
* cleanup net and netbuf interfaces
* ensure open sockets are destroyed on shutdown
* support signals
* system call threads
* disk I/O threads
* syslog
* statistics
* global lock counters
* utf8 support for scan, json
* float/double support for format, scan, json
* UDP servers
* SSL servers
* performance instrumentation
* refine memcache module:
** statistics
** add UDP protocol support

Larger items:
* NUMA support:
** NUMA-aware memory allocation
** NUMA-aware synchronization
** NUMA-aware work scheduling
* persistence
* replication
* HTTP module
* redis protocol
* arm aarch64 port
* extension language
* AF_PACKET and/or DPDK-based net I/O

Low priority enhancements:
* DNS resolver
* background workers
* fs event notification
* core and task local storage (tls)
* exit idle workers pending for too long
* reap dead tasks pending for too long
* adopt C11-compatible fences and atomics
* non-blocking log
* backoff and/or wait queue on ring full
* non-blocking pool growth
* Brodnik-style pool growth
* shrink pools on low demand
* shrink memcache table on low demand
* generic work stealing
* proper future cancellation
** let tasks to be canceled across cores
** let catch task termination with setjmp/longjmp or libunwind mechanism
* improve ports:
** non-blocking
** allow sending other types
** function call marshal/dispatch mechanism on top of that
* try to detect clock adjustments and reset realtime timers accordingly
* failure trace records
