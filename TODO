
ASAP:
* work dealing between worker threads
* devise generic net buffer mechanism
* make net module thread aware and safe
* correct shutdown:
** ensure worker & master & aux tasks are finished
** ensure socket & server object destruction
* correct destruction:
** ensure destroyed socket & server objects are not accessed anymore
** ensure safe task & port objects destruction (refcount? capabilities? )

Essentials:
* use non-blocking data structures instead of locks where possible
* resolve socket close issues: time wait
* support signals
* UDP servers
* SSL servers
* fs notifications
* system call threads
* disk I/O threads
* configuration file parsing
* command line argument parsing
* syslog
* daemonize
* statistics
* performance instrumentation
* refine and finish memcache module:
** eviction
** expiration
** statistics
** polish
** optimize
** add UDP protocol support
** add binary protocol support
** use multi-threaded workers
* HTTP module

Enhancements:
* task local storage (tls)
* reap dead tasks pending for too long
* try to detect clock adjustments and reset realtime timers accordingly
* memory management:
** use separate mspace for task local dynamic memory ?
** slab allocator (to base object pools on)
** buddy allocator (for I/O buffers and slabs)
** region allocator
** garbage collection
* failure trace records
* arm port
