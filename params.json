{
  "name": "MainMemory.IO",
  "tagline": "Generic Server Framework and In-Memory Database",
  "body": "MainMemory\r\n==========\r\n\r\nThe MainMemory project is intended to provide\r\n\r\n- a framework for network servers of all sorts;\r\n- some specific implementations of such servers.\r\n\r\nThe purpose of the MainMemory project is akin to SGI's State Threads\r\nLibrary (http://state-threads.sourceforge.net/). But MainMemory also\r\naims to take full advantage of modern multi-core systems with large\r\nRAM sizes.\r\n\r\nAs the first application and testbed for the MainMemory framework\r\nthe project provides almost complete implementation of the memcached\r\nprotocol.\r\n\r\nIn the future it could also be used to implement any other protocol,\r\nfor instance, redis. Or something completely different like HTTP,\r\nWebDAV, WebSocket protocols thus allowing to implement a caching HTTP\r\nserver, proxy, storage platform, or a pub-sub system.\r\n\r\n# Status\r\n\r\nThe project has been slowly brewing as a personal research vehicle for\r\nsome time already. A number of different approaches has been tried and\r\nabandoned. All this time it was run mostly against memslap and memtier\r\nbenchmarks.\r\n\r\nNow it has matured enough to consider it ready for experimental use by a\r\nwide audience. Hopefully in a short term it could be declared production\r\nready as well.\r\n\r\n# Target Platforms\r\n\r\nMainMemory is intended to run on x86/x86-64 boxes with Linux or any BSD\r\nflavor OS including Mac OS/X. The key requirement is the availability of\r\neither epoll or kqueue API in addition to the standard POSIX API.\r\n\r\nHowever so far it has only been extensively tested on Linux and Mac OS/X.\r\nAnd on a single FreeBSD instance running on a VM. Therefore any portability\r\nreports and/or patches are welcome.\r\n\r\nMainMemory includes a not-much-tested \"generic architecture\" port so there\r\nis a slim chance it will run on any non-x86 platform easily enough. But most\r\nlikely it will take some extra work. In the future it is planed to have a\r\nnative ARM port too.\r\n\r\n# Build\r\n\r\nMainMemory relies on the venerable autotools suite to build. The build\r\nprocedure is as follows:\r\n\r\n```\r\n> ./bootstrap\r\n> ./configure <config-options>\r\n> make\r\n```\r\n\r\nThis produces few libraries and a binary file named 'mmem' located in the\r\n'src' subdirectory. The 'mmem' file could be used as a replacement for your\r\nmemcached.\r\n\r\n## Single-Threaded and Multi-Threaded Builds\r\n\r\nMainMemory can be built in one of the two configurations:\r\n\r\n- single-threaded\r\n- or multi-threaded (SMP).\r\n\r\nFor the former option, run the configure script as follows:\r\n\r\n```\r\n> ./configure\r\n```\r\n\r\nFor the later option, run the configure script as follows:\r\n\r\n```\r\n> ./configure --enable-smp\r\n```\r\n\r\n## What Build to Use\r\n\r\nThe single-threaded version does not use the synchronization mechanisms of\r\nthe multi-threaded version. Therefore it performs better (with higher\r\nthroughput and smaller latency) until it hits the single-core execution\r\nlimits.\r\n\r\nAs a rule of thumb if the required throughput of the server is less than\r\nabout 100k requests per second then it might be beneficial to use the\r\nsingle-threaded build. Otherwise the multi-threaded build is preferred.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}